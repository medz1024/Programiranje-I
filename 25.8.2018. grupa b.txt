Zadatak 01
Napisati program koji korisniku omogućava unos cijelog broja n, te izračunava: 
S = [1/(n + 1)] - [2/((n - 1) + 2!)] + [3/((n - 2) + 3!)] - [4/((n - 3) + 4!)] + ... + (-1)^(n - 1) * [n/(1 + n!)]

#include <iostream>
#include <cmath>

using namespace std;

int faktorijel(int broj)
{
    int proizvod = 1;
    for (int i = 2; i <= broj; i++) proizvod *= i;
    return proizvod;
}

int main()
{
    int n;
    cout << "Unesite prirodan broj n: ";
    cin >> n;

    float rjesenje = 0;
    for (int i = 1; i <= n; i++)
        rjesenje += pow(-1, i - 1) * i / ((n - i + 1) + faktorijel(i));

    cout << rjesenje << endl;

    system("pause>0");
    return 0;
}

Zadatak 02
Napisati program koji simulira bacanje 3 kockice (jedna kockica ima 6 strana i na tim stranama su brojevi 1 - 6).
 Simuliranje bacanja svake kockice ostvariti funkcijom rand() % 6 + 1. 
Simulirati konstantno bacanje sve tri kockice dok se u dva uzastopna bacanja ne desi da se dobiju isti brojevi 
na sve tri kockice (npr. u šestom bacanju se dobiju brojevi 2, 2, 2 a u sedmom 4, 4, 4 na sve tri kockice). 
Ispisati koliko je ukupno bilo bacanja dok se nije ispunio navedeni uslov.
 Nije potrebno tražiti bilo kakav unos od korisnika.

Napomena: Po želji kreirati dodatne funkcije da se olakša rješavanje zadataka.

#include <iostream>
#include <ctime>

using namespace std;

int main()
{
    int k1, k2, k3, brojac = 0, brBacanja = 0;

    srand(time(NULL));
    while (brojac != 2)
    {
        k1 = rand() % 6 + 1;
        k2 = rand() % 6 + 1;
        k3 = rand() % 6 + 1;

        k1 == k2 && k1 == k3 ? brojac++ : brojac = 0;

        brBacanja++;
    }

    cout << brBacanja << endl;

    system("pause>0");
    return 0;
}

Zadatak 03
Napisati program koji će generisati Fibonacci niz i smjestiti ga u jednodimenzionalni niz od 20 elemenata.
 (Fibonaccijev niz je niz brojeva koji počinje brojevima 0 i 1, a svaki sljedeći broj u nizu dobije se
 zbrajanjem prethodna dva: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2)). Zatim napraviti funkciju koja će
 sortirati niz uzlazno po srednjoj cifri. (Za brojeve sa parnim brojem koristiti aritmeticku sredinu srednje
 dvije cifre). Voditi računa o tipu podatka prilikom računanja srednje cifre.

#include <iostream>
#include <cmath>

using namespace std;

void fibonacci(int niz[], int duzina)
{
    niz[0] = 0;
    niz[1] = 1;

    for (int i = 2; i < duzina; i++)
        niz[i] = niz[i - 1] + niz[i - 2];
}

void ispis(int niz[], int duzina)
{
    for (int i = 0; i < duzina; i++)
        cout << niz[i] << " ";
    cout << endl;
}

int brojCifri(int broj)
{
    int brojac = 0;
    while (broj)
    {
        brojac++;
        broj /= 10;
    }
    return brojac;
}

int getSrednju(int broj)
{
    int duzina = brojCifri(broj);
    
    if (duzina % 2 == 0)
    {
        duzina = duzina / 2 - 1;
        broj /= pow(10, duzina);

        int srednja = 0;
        srednja += broj % 10;
        broj /= 10;
        srednja += broj % 10;
        srednja /= 2;

        return srednja;
    }
    else
    {
        duzina /= 2;
        broj /= pow(10, duzina);
        return broj % 10;
    }
}

void sortiraj(int niz[], int duzina)
{
    for (int i = 0; i < duzina; i++)
    {
        for (int j = 0; j < duzina; j++)
            if (getSrednju(niz[i]) < getSrednju(niz[j]))
            {
                int temp = niz[i];
                niz[i] = niz[j];
                niz[j] = temp;
            }
    }
}

int main()
{
    const int d = 20;
    int niz[20];

    fibonacci(niz, d);
    ispis(niz, d);
    sortiraj(niz, d);
    ispis(niz, d);

    system("pause>0");
    return 0;
}

Zadatak 04
Neka je data matrica dimenzija 11x12 u kojoj svaki red predstavlja fudbalera nekog tima, a svaka kolona utakmicu 
(fudbalski meč) u toku sezone. Elementi matrice predstavljaju broj postignutih golova po utakmici. Kreirati,
 a potom u glavnom programu testirati, sljedeće funkcije:

Funkciju za unos svih golova za odabranu utakmicu. Omogućiti poziv funkcije iz main funkcije više puta kako bi 
se unijeli podaci za sve utakmice.
Funkciju koja za odabranog fudbalera vrši ispis postignutih golova po utakmicama. Ukoliko fudbaler nije postigao
 niti jedan gol, podatak za tu utakmicu se ne ispisuje. Pored toga, funkcija kao rezultat vraća prosječan broj
 postignutih golova za cijelu sezonu.
Funkciju koja pronalazi fudbalera sa najboljim prosjekom postignutih golova te ispisuje njegov
 prosjek u sezoni i vraća index tog fudbalera.

#include <iostream>
#include <iomanip>

using namespace std;

void unos(int goloviPoUtakmici[][12], int utakmica)
{
    for (int i = 0; i < 11; i++)
        cin >> goloviPoUtakmici[i][utakmica];
        
}

double statistikaIgraca(int igrac[], bool ispis = false)
{
    int suma = 0;
    for (int i = 0; i < 12; i++)
    {
        suma += igrac[i];
        if (igrac[i] != 0 && ispis)
            cout << "Utakmica " << i + 1 << " " << igrac[i] << endl;
    }

    return (double)suma / 12;
}


int najboljiUcinak(int goloviPoUtakmici[][12])
{
    int max = 0;
    for (int i = 1; i < 11; i++)
        if (statistikaIgraca(goloviPoUtakmici[max]) < statistikaIgraca(goloviPoUtakmici[i]))
            max = i;

    cout << "Najbolji igrac je igrac broj " << max + 1 << " sa " << statistikaIgraca(goloviPoUtakmici[max])
        << " golova po utakmici." << endl;
    return max;

}

int main()
{
    int goloviPoUtakmici[11][12];

    int izbor = -1;
    do
    {
        cout << "Izaberi utakmicu: ";
        cin >> izbor;
        if (izbor >= 0 && izbor < 11) unos(goloviPoUtakmici, izbor);

    } while (izbor >= 0 || izbor < 11);

    for (int i = 0; i < 11; i++)
    {
        statistikaIgraca(goloviPoUtakmici[i], true);
        cout << endl;
    }

    najboljiUcinak(goloviPoUtakmici);

    return 0;
}