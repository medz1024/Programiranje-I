Zadatak 01
Napisati program koji učitava prirodan broj n. Program treba ispisati najmanji prirodan broj m,
 veći ili jednak n, koji je potencija nekog prirodnog broja, tj. m = k ^ l, gdje su k i l prirodni 
brojevi >= 2.

#include <iostream>
#include <cmath>
 
using namespace std;
 
int main()
{
    int n = 0, m, l, k;
    int granica = 10;
    bool potencija = false;
   
    while(n < 1)
    {
        cout << "Unesite broj: " << endl;
        cin >> n;
       
    }
   
    for(k = 2; k <= granica; k++)
    {
        for(l = 2; l <= granica; l++)
        {
            m = pow(l, k);
           
            if(m >= n)
            {
                cout << m << endl;
                potencija = true;
                break;
            }
           
        }
       
        if(potencija) break;
            
    }
   
    system("pause>0");
    return 0;
}

Zadatak 02
Napisati program koji će omogućiti korisniku unos broja n (uz uslov 10 <= n <= 1000).
 Zatim simulirati unos n slučajnih vrijednosti. Simuliranje unosa ostvariti funkcijom rand() % 1000 + 1.
 Izračunati statističke podatke u kojem procentu se od n generisanih slučajnih vrijednosti pojavljuje
 prost broj.

Npr. Ako je generisano 10 brojeva (n = 10): 5,7,4,13,17,20,25,23,30,45, u ovom uzorku od 
10 brojeva postoji 5 prostih brojeva pa je procenat prostih brojeva u ovom slučaju 50%.

Napomena: Po želji kreirati dodatne funkcije da se olakša rješavanje zadatka.

#include <iostream>
#include <ctime>

using namespace std;

bool isProst(int broj)
{
    for (int i = 2; i < broj; i++)
        if (broj % i == 0)
            return false;
    return true;
}

void generisi(int niz[], int n)
{
    for (int i = 0; i < n; i++) niz[i] = rand() % 1000 + 1;
}

int procenatProstihBrojeva(int niz[], int n)
{
    int brojac = 0;
    for (int i = 0; i < n; i++)
        if (isProst(niz[i]))
            brojac++;

    return 100 * brojac / n;
}

int main()
{
    int niz[1000];
    int n = 0;

    while (n < 10 || n > 1000)
    {
        cout << "Unesite prirodan broj: ";
        cin >> n;
    }

    srand(time(0));
    generisi(niz, n);

    cout << "Procenat prostih brojeva je " << procenatProstihBrojeva(niz, n) << "%" << endl;

    system("pause>0");
    return 0;
}

Zadatak 03
Napisati program koji će omogućiti unos cijelih brojeva sa neparnih brojem cifara (minimalno trocifrenih)
 u jednodimenzionalni niz od 20 elemenata i jedan karakter u main funkciji. Zatim napraviti funkciju
 koja će primati kao argumente taj niz i karakter. Funkcija treba da na osnovu karaktera izvrši 
sortiranje niza uzlazno ili silazno po srednjoj cifri i to ako je primljeni karakter "U"
 sortiranje treba biti uzlazno, a ako je primljen karakter "S" onda sortiranje treba biti silazno. 
Ukoliko karakter nije jedan od navedenih, treba se ispisati poruka "Sortiranje nedefinisano". 
Obavezno voditi računa o optimizaciji code-a koja posebno utiče na broj bodova u ovom zadatku.

#include <iostream>
#include <cmath>

using namespace std;

int brCifri(int broj)
{
    int brojac = 0;
    while (broj)
    {
        brojac++;
        broj /= 10;
    }

    return brojac;
}

void Unos(int niz[], int duzina)
{
    for (int i = 0; i < duzina; i++)
        do
        {
            cout << "Unesite broj: ";
            cin >> niz[i];

            int duzina = brCifri(niz[i]);

        } while (duzina % 2 == 0 && duzina > 2);
}

int getSrednjuCifru(int broj)
{
    int duzina = brCifri(broj) / 2;
    broj /= pow(10, duzina);
    return broj % 10;
}

void Zamjeni(int &x, int &y)
{
    int temp = x;
    x = y;
    y = temp;
}

void Sortiraj(int niz[], int duzina, char nacin)
{
    for (int i = 0; i < duzina; i++)
    {
        bool zamjena = false;
        for (int j = 0; j < duzina; j++)
        {
            if (nacin == 'U')
            {
                if (getSrednjuCifru(niz[i]) < getSrednjuCifru(niz[j]))
                {
                    Zamjeni(niz[i], niz[j]);
                    zamjena = true;
                }
            }
            else if (nacin == 'S')
            {
                if (getSrednjuCifru(niz[i]) > getSrednjuCifru(niz[j]))
                {
                    Zamjeni(niz[i], niz[j]);
                    zamjena = true;
                }
            }
        }

        if (!zamjena) break;
    }
}

void Ispis(int niz[], int duzina)
{
    for (int i = 0; i < duzina; i++) cout << niz[i] << " ";
    cout << endl;
}

int main()
{
    int niz[20];
    char znak;

    Unos(niz, 20);

    cout << "Unesite nacin sortiranja " << endl << "U - Uzlazno" << endl << "S - Silazni" << endl;
    cin >> znak;

    if (znak == 'U' || znak == 'S')
    {
        Ispis(niz, 20);
        Sortiraj(niz, 10, znak);
        Ispis(niz, 20);

    }
    else cout << "Sortiranje nedefinisano" << endl;


    system("pause>0");
    return 0;
}

Zadatak 04
Dat je 2D niz koji simulira šahovsku tablu. Omogućiti korisniku unos cjelobrojnih elemenata 2D
 niza tako da se u svako "crno" polje unese parni broj sa neparnim brojem cifara, a u "bijelo" 
polje neparni broj sa parnim brojem cifara. Provjeriti da li je matrica simetrična po glavnoj 
dijagonali (dakle da li je broj na poziciji 1.0 jednak broju na poziciji 0.1, na 0.2 jednak onome 
na 2.0, na 3.1 jednak onome na 1.3 itd.) te ako jeste simetrična na taj način izvršiti transpoziciju
 matrice tako što će se zamjeniti redovi i kolone (ne samo ispisati nego potpuno zamjeniti elemente). 
Ako nije u potpunosti simetricna ispisati koliko ima simetricnih elemenata).

C - Crna
B - Bijela
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C00 | B01 | C02 | B03 | C04 | B05 | C06 | B07 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B10 | C11 | B12 | C13 | B14 | C15 | B16 | C17 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C20 | B21 | C22 | B23 | C24 | B25 | C26 | B27 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B30 | C31 | B32 | C33 | B34 | C35 | B36 | C37 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C40 | B41 | C42 | B43 | C44 | B45 | C46 | B47 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B50 | C51 | B52 | C53 | B54 | C55 | B56 | C57 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C60 | B61 | C62 | B63 | C64 | B65 | C66 | B67 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B70 | C71 | B72 | C73 | B74 | C75 | B76 | C77 |
    +-----+-----+-----+-----+-----+-----+-----+-----+


#include <iostream>
#include <iomanip>

using namespace std;

const int d = 8;

void unos(int niz[][d]);
void ispis(int niz[][d]);
bool isUnos(int broj);
int duzina(int broj);
bool isCrno(int i, int j);
bool isSimetricna(int niz[][d]);
void transponuj(int niz[][d]);

int main()
{
    int niz[d][d];

    unos(niz);

    if (isSimetricna(niz))
    {
        ispis(niz);
        transponuj(niz);
        ispis(niz);
    }


    system("pause>0");
    return 0;
}

void transponuj(int niz[][d])
{
    int noviNiz[d][d];
    for (int i = 0; i < d; i++)
        for (int j = 0; j < d; j++)
            noviNiz[j][i] = niz[i][j];

    for (int i = 0; i < d; i++)
        for (int j = 0; j < d; j++)
            niz[i][j] = noviNiz[i][j];
}

bool isSimetricna(int niz[][d])
{
    /*
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |  X  |  A  |  B  |     |     |     |     |     |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |  A  |  X  |     |  C  |     |     |     |     |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |  B  |     |  X  |     |  D  |     |     |     |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |     |  C  |     |  X  |     |  E  |     |     |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |     |     |  D  |     |  X  |     |  F  |     |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |     |     |     |  E  |     |  X  |     |  G  |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |     |     |     |     |  F  |     |  X  |  H  |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    |     |     |     |     |     |  G  |  H  |  X  |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    
    */
    int brojac = 0;
    bool flag = true;

    if(niz[0][1] != niz[1][0] || niz[d - 1][d - 2] != niz[d - 2][d - 1]) flag = false;

    for (int i = 0, j = 2; i < d - 2 || j < d; i++, j++)
        if (niz[i][j] == niz[j][i])
          brojac += 2;
        else
          flag = false;
            

    if (!flag) cout << "Matrica ima " << brojac << " simetricnih elemenata" << endl;

    return flag;
}

bool isCrno(int i, int j)
{
    return ((i % 2 == 0 && j % 2 == 0) || (i % 2 != 0 && j % 2 != 0));
    //alternativno: return (i + j) % 2 == 0;
}

int duzina(int broj)
{
    int brojac = 0;
    while(broj)
    {
        broj /= 10;
        brojac++;
    }

    return brojac;
}

bool isUnos(int niz[][d], int i, int j)
{
    return (niz[i][j] % 2 == 0 && duzina(niz[i][j]) % 2 != 0 && isCrno(i, j)) ||
           (niz[i][j] % 2 != 0 && duzina(niz[i][j]) % 2 == 0 && !isCrno(i, j));
    
}

void ispis(int niz[][d])
{
    for (int i = 0; i < d; i++)
    {
        for (int j = 0; j < d; j++)
            cout << niz[i][j] << " ";
        cout << endl;
    }
}

void unos(int niz[][d])
{
    for (int i = 0; i < d; i++)
    {
        for (int j = 0; j < d; j++)
        {
            do
            {
              cout << "niz[" << i << "][" << j << "] = " << endl;
              cin >> niz[i][j];

            }while(!isUnos(niz, i, j));
        }
    }
}