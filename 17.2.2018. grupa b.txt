/* Zadatak 01
Napisati program koji učitava prirodan broj n. Program treba ispisati najmanji prirodan broj m, veći ili jednak n, koji je potencija nekog prirodnog broja, tj. m = k ^ l, gdje su k i l prirodni brojevi >= 2. */

#include <iostream>
#include <cmath>
 
using namespace std;
 
int main()
{
    int n, m, l, k;
    int granica = 10;
    bool potencija = false;
   
    do
    {
        cout << "Unesite broj: " << endl;
        cin >> n;
       
    }while(n < 1);
   
    for(k = 2; k <= granica; k++)
    {
        for(l = 2; l <= granica; l++)
        {
            m = pow(l, k);
           
            if(m >= n)
            {
                cout << m << endl;
                potencija = true;
                break;
            }
           
        }
       
        if(potencija) break;
            
    }
   
   
    system("pause>0");
    return 0;
}

/* Zadatak 02
Napisati program koji simulira bacanje 3 kockice (jedna kockica ima 6 strana i na tim stranama
 su brojevi 1 - 6). Simuliranje bacanja svake kockice ostvariti funkcijom rand() % 6 + 1. 
Simulirati konstantno bacanje sve tri kockice dok se u dva uzastopna bacanja ne desi da se dobiju
 isti brojevi na sve tri kockice (npr. u šestom bacanju se dobiju brojevi 2, 2, 2 a u sedmom 4,4,4
 na sve tri kockice). Ispisati koliko je ukupno bilo bacanja dok se nije ispunio navedeni uslov.
 Nije potrebno tražiti bilo kakav unos od korisnika.

Napomena: Po želji kreirati dodatne funkcije da se olakša rješavanje zadataka. */

#include <iostream>
#include <ctime>
 
using namespace std;
 
int main()
{
    int k1, k2, k3, brojac = 0, brBacanja = 0;
   
    srand(time(NULL));
    do
    {
        k1 = rand() % 6 + 1;
        k2 = rand() % 6 + 1;
        k3 = rand() % 6 + 1;
       
        if(k1 == k2 && k1 == k3)
            brojac++;
        else
            brojac = 0;
           
        brBacanja++;
    }while(brojac != 2);
   
    cout << brBacanja << endl;
   
    system("pause>0");
    return 0;
}

/* Zadatak 03
Napisati program koji će omogućiti unos minimalno trocifrenih cijelih brojeva u jednodimenzionalni niz 
od 20 elemenata. Zatim napraviti funkciju koja će u nizu pronaći sve brojeve kojima je prva cifra 
(početna cifra sa lijeve strane) parna i ukloniti ih iz niza. Uklanjanje elemenata niza obavezno 
uraditi tako da ne ostaju prazni elementi već da se ostatak niza pomjeri kako ne bi bilo prazni.
Pomjeranje ostatka niza niza obavezno raditi prilikom uklanjanja elemenata a ne sortiranjem poslije 
uklanjanja. */

#include <iostream>
 
using namespace std;
 
void unos(int niz[], int duzina);
void izbacivanje(int niz[], int &duzina);
bool parnaCifra(int broj);
void ispis(int niz[], int duzina);
 
int main()
{
    int duzina = 20;
    int niz[20];
   
    unos(niz, duzina);
    ispis(niz, duzina);
    izbacivanje(niz, duzina);
    cout << endl;
    ispis(niz, duzina);
   
    system("pause>0");
    return 0;
}
 
void izbacivanje(int niz[], int &duzina)
{
    for(int i = 0; i < duzina; i++)
    {
        if(parnaCifra(niz[i]))
        {
            for(int j = i; j < duzina; j++)
            {
                niz[j] = niz[j+1];
            }
           
            i--;
            duzina--;
        }
    }
}
 
bool parnaCifra(int broj)
{
    while(broj > 9) broj /= 10;
   
    return broj % 2 == 0;
}
 
void unos(int niz[], int duzina)
{
    for(int i = 0; i < duzina; i++)
    {
        do
        {
            cout << "niz[" << i << "]: " << endl;
            cin >> niz[i];
           
        }while(niz[i] < 100);
    }
}
 
void ispis(int niz[], int duzina)
{
    for(int i = 0; i < duzina; i++)
        cout << niz[i] << " ";
}

/* Zadatak 04
Dat je 2D niz koji simulira šahovsku tablu. Omogućiti korisniku unos cjelobrojnih elemenata 2D
 niza tako da se u svako "crno" polje unese parni broj sa neparnim brojem cifara, a u "bijelo polje
 neparni broj sa parnim brojem cifara. Izračunati i ispisati prosjeke (aritmetičke sredine) svih
 elemenata na bijelim poljima iznad glavne dijagonale te na crnim poljima ispod sporedne dijagonale.

C - Crna
B - Bijela
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C00 | B01 | C02 | B03 | C04 | B05 | C06 | B07 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B10 | C11 | B12 | C13 | B14 | C15 | B16 | C17 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C20 | B21 | C22 | B23 | C24 | B25 | C26 | B27 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B30 | C31 | B32 | C33 | B34 | C35 | B36 | C37 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C40 | B41 | C42 | B43 | C44 | B45 | C46 | B47 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B50 | C51 | B52 | C53 | B54 | C55 | B56 | C57 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | C60 | B61 | C62 | B63 | C64 | B65 | C66 | B67 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | B70 | C71 | B72 | C73 | B74 | C75 | B76 | C77 |
    +-----+-----+-----+-----+-----+-----+-----+-----+
*/

#include <iostream>
 
using namespace std;
 
const int d = 8;
 
void unos(int niz[][d]);
bool isUnos(int broj);
int duzina(int broj);
void avg(int niz[][d], double &avg_b, double &avg_c);
bool isCrno(int i, int j);
 
int main()
{
    int niz[d][d];
    double avg_b, avg_c;
   
    unos(niz);
    avg(niz, avg_b, avg_c);
   
    cout << avg_b << endl;
    cout << avg_c << endl;
   
    system("pause>0");
    return 0;
}
 
void avg(int niz[][d], double &avg_b, double &avg_c)
{
    int suma_b = 0, suma_c = 0, broj_b = 0, broj_c = 0;
       
    for(int i = 0; i < d; i++)
    {
        for(int j = 0; j < d; j++)
        {
            if(isCrno(i, j) && i + j > d - 1)
            {
                suma_c += niz[i][j];
                broj_c++;
            }
            else if(!isCrno(i, j) && i < j)
            {
                suma_b += niz[i][j];
                broj_b++;
            }
        }
    }
   
    avg_b = double(suma_b) / broj_b;
    avg_c = double(suma_c) / broj_c;
}
 
bool isCrno(int i, int j)
{
    return ((i % 2 == 0 && j % 2 == 0) || (i % 2 != 0 && j % 2 != 0));
    //alternativno: return (i + j) % 2 == 0;
}
 
int duzina(int broj)
{
    int brojac = 0;
    do
    {
        broj /= 10;
        brojac++;
       
    }while(broj > 0);
   
    return brojac;
}
 
bool isUnos(int niz[][d], int i, int j)
{
    return (niz[i][j] % 2 == 0 && duzina(niz[i][j]) % 2 != 0 && isCrno(i, j)) ||
           (niz[i][j] % 2 != 0 && duzina(niz[i][j]) % 2 == 0 && !isCrno(i, j));
         
}
 
void unos(int niz[][d])
{
    for(int i = 0; i < d; i++)
    {
        for(int j = 0; j < d; j++)
        {
            do
            {
              cout << "niz[" << i << "][" << j << "] = " << endl;
              cin >> niz[i][j];

            }while(!isUnos(niz, i, j));
        }
    }
}
