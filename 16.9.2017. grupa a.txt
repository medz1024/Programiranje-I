/*Zadatak 01
Napisati program koji rješava sljedeći problem. Date su firma A, B i C sa godišnjim prihodima:
 A - prihod 10M eura B - prihod 7M eura C - prihod 5M eura sa sljedećim stabilnim fiksnim godišnjim rastom 
prihoda za koji pretpostavljamo da se neće mijenjati A - 2.05% B - 2.80% C - 4.30% Potrebno je pronaći koja firma
 će prva prestići firmu A u godišnjem prihodu i za koliko godina će se to desit. Također potrebno je ispisati
 koliko će sve tri firme imati godišnji prihod u toj godini. */

#include <iostream>
 
using namespace std;
 
int main()
{
    const double godRastPrihodaA = 2.05,
                 godRastPrihodaB = 2.80,
                 godRastPrihodaC = 4.30;
   
    double prihodA = 10,
           prihodB = 7,
           prihodC = 5;
       
    int i = 0;
       
   
    while(prihodB < prihodA || prihodC < prihodA)
    {
        prihodA = prihodA + prihodA * godRastPrihodaA / 100;
        prihodB = prihodB + prihodB * godRastPrihodaB / 100;
        prihodC = prihodC + prihodC * godRastPrihodaC / 100;
        i++;  
    }
   
    if(prihodB > prihodC)
        cout << "Firma B ce prva prestici firmu A za " << i << " godina" << endl;
    else
        cout << "Firma C ce prva prestici firmu A za " << i << " godina" << endl;
       
    cout << "Firma A nakon " << i << " godina: " << prihodA << " miliona" << endl;
    cout << "Firma B nakon " << i << " godina: " << prihodB << " miliona" << endl;
    cout << "Firma C nakon " << i << " godina: " << prihodC << " miliona" << endl;
 
    system("pause>0");
    return 0;
}

/* Zadatak 02
Napisati program koji na osnovu unesenog cijelog broja N pronalazi i ispisuje srednju cifru ako broj N ima 
neparan broj cifara, odnosno aritmeticku sredinu (tip float) srednje dvije cifre ako broj N ima parni broj cifara, 
a zatim pronaci najmanji broj tipa int sa kojim se srednja cifra ili aritmeticka sredina srednjih cifri
treba pomnoziti da bi se dobio broj koji je veci od inicijalnog zadanog broja.

Npr. za broj 75631 srednja cifra je 6, najmanja integer vrijednost sa kojom treba pomnoziti broj 6 da bi se 
dobio broj veci od 75631 je 12606 jer je 12606 * 6 = 75636, 75636 > 75631ili za broj 984354 aritmeticka sredina srednje dvije cifre je 3.5, najmanja integer vrijednost sa kojom treba pomnoziti broj 3.5 da bi se dobio broj veci od 984354 je 281245 jer je 281245 * 3.5 = 984357.5, 984357.5 > 984354

(Napomena: Potrebno je voditi računa o tipovima podataka.) */

#include <iostream>

using namespace std;

int duzinaBroja(int broj)
{
    int brojac = 0;
    while(broj)
    {
        broj /= 10;
        brojac++;
    }
    
    return brojac;
}

int najmanjiBroj(int broj)
{
    int duzina = duzinaBroja(broj);
    int temp = broj;
    float cifra;
    int najmanji;
    
    if(duzina % 2 == 0)
    {
        for(int i = 0; i < (duzina - 1) / 2; i++)
            temp /= 10;
        
        cifra = ((temp % 10) + (temp / 10) % 10) / 2.0;
    }
    else
    {
        for(int i = 0; i < duzina / 2; i++)
            temp /= 10;
            
        cifra = temp % 10;
        
    }
    
    najmanji = int(broj / cifra);
    if(najmanji * cifra < broj)
        return najmanji + 1;
    else
        return najmanji;
    
}


int main()
{
    int broj;
    do
    {
        cout << "Unesite broj: ";
        cin >> broj;
    }while(broj <= 0);
    
    cout << "Najmanji broj je " << najmanjiBroj(broj) << endl;
    
    
    
    
    return 0;
}

/* Zadatak 03
Napisati funkciju koja kao parametare prima dva niza char recenica[200] i char rijec[10] odnosno rečenicu 
(niz od najviše 200 karaktera) i riječ (niz od najviše 10 karaktera) te u nizu recenica[200] pretrazuje i
 pronalazi sekvencu karaktera unesenih u niz rijec[10]. Radi jednostavnosti rjesenja podrazumjeva se da i
 recenica i rijec koja se pretrazuje zavrsavaju tackom. Poslije pronalaska tražene riječi, pomenutu 
riječ treba zamijeniti karakterima "FIT".

(Pomoć: Treba voditi računa koliko karaktera ima riječ koja je pronađena i zamjenjena)

Npr. ako je data rečenica u nizu recenica[200]: "Ja studiram na fakultetu jer zelim biti expert."
 i rijec[10]: "fakultet",funkcija je treba pronaći riječ "fakultet" u rečenici i pretvoriti je u "FIT":
 "Ja studiram na FITu jer zelim biti expert." (ima ukupno manje slova a zadrzan je samo po jedan space između riječi).

Obavezno u main funkciji omogučiti unos recenice, zatim tražene riječi i ispisati novu rečenicu poslije zamjene. */

#include <iostream>

using namespace std;

int duzina(const char niz[])
{
    int i = 0;
    while(niz[i] != '\0') i++;
    return i;
}

bool rijecPostoji(const char recenica[], int i, const char rijec[])
{
  int duzinaRijeci = duzina(rijec);

  for(int j = 0; j < duzinaRijeci; j++)
    if(recenica[i++] != rijec[j])
      return false;
  
  return true;
}

void preklopiRijec(char recenica[], int &i, const char rijec[])
{
  int duzinaRijeci = duzina(rijec);
  for(int j = 0; j < duzinaRijeci; j++)
    recenica[i++] = rijec[j];
}

void zamjena(char recenica[], const char rijec[], int &duzinaRecenice)
{
    char novaRijec[] = "FIT";
    int duzinaRijeci = duzina(rijec);

    for(int i = 0; i < duzinaRecenice; i++)
    {
        if(rijecPostoji(recenica, i, rijec))
        {
            int novaDuzina = duzina(novaRijec);

            if(novaDuzina < duzinaRijeci)
            {
              preklopiRijec(recenica, i, novaRijec);

              //Pomjeri recenicu do lokacije "i" tako da ne ostaje praznog mjesta ni starih karaktera
              for(int j = i; j < duzinaRecenice - duzinaRijeci + novaDuzina + 1; j++)
                recenica[j] = recenica[j + duzinaRijeci - novaDuzina];
            }
            else
            {
              //Pomjeri recenicu nazad tako da se nova rijec ne napise preko ostatka recenice
              for(int j = duzinaRecenice + novaDuzina - duzinaRijeci; j > i; j--)
                recenica[j] = recenica[j - 1];
              
              preklopiRijec(recenica, i, novaRijec);
            }

            duzinaRecenice = duzinaRecenice - duzinaRijeci + novaDuzina;
            i--;
        }
        
    }
}

int main()
{
    char recenica[200];
    char rijec[10];
    
    cout << "Unesite recenicu: ";
    cin.getline(recenica, 200, '.');
    
    cout << "Unesite rijec: ";
    cin.ignore();
    cin.getline(rijec, 10, '.');
    
    int duzinaRecenice = duzina(recenica);
    zamjena(recenica, rijec, duzinaRecenice);
    
    cout << "Nakon izmjene: ";
    for(int i = 0; i < duzinaRecenice; i++)
      cout << recenica[i];


    system("pause>0");
    return 0;
    
}


/* Zadatak 04
Neka je dat 2D niz tipa int dimenzija 10x10. Kreirati, a potom u glavnom programu testirati, sljedeće funkcije:

Funkciju koja za vrsi generisanje podataka u 2D nizu na nacin da se u elementu sa indexom [0][0] upise vrijednost
 1 a svaki slijedeci element da ima vrijednost prethodnog elementa pomnozenog sa 2 kao na slici. 
Generisanje se prekida ako se desi overflow na varijabli int.
Funkciju koja popunjenu matricu iz pod-zadatka a) transponuje tako sto joj zamjeni redove i kolone.
Funkciju koja kao parametar prima pomenuti niz i index kolone te silazno sortira kompletan 2D niz po 
izabranoj koloni na nacin da se kompletni redovi zamjene prema vrijednosti u izabranoj koloni 
(princip sortiranja po koloni kao u MS Excel tabeli)
     +------+------+------+------+------+------+------+------+------+------+
     |  1   |  2   |  4   |  8   |  16  |  32  |  64  | 128  | 256  | 512  |
     +------+------+------+------+------+------+------+------+------+------+
     | 1024 | 2048 | itd. | itd. | itd. | itd. | itd. | itd. | itd. | itd. |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+ */


#include <iostream>
#include <iomanip>

using namespace std;

const int d = 10;

void generisanje(int niz[][d])
{
    int broj = 1;
    bool overflow = false;
    
    for(int i = 0; i < d; i++)
    {
        for(int j = 0; j < d; j++)
        {
            if(i == 0 && j == 0)
                niz[i][j] = broj;
            else
            {
                niz[i][j] = 2 * broj;
                broj = niz[i][j]; // broj = broj * 2
                
                if(niz[i][j] < 0)
                {
                    niz[i][j] = 0;
                    overflow = true;
                }
            }
        }
        
        if(overflow)
            break;
    }
}

void ispis(int niz[][d])
{
    for(int i = 0; i < d; i++)
    {
        for(int j = 0; j < d; j++)
        {
           cout << setw(12) << niz[i][j];
        }
        cout << endl;
    }
}

void transponuj(int niz[][d])
{
    int novi_niz[d][d] = {};
    
    for(int i = 0; i < (d + 1) / 2; i++)
    {
        for(int j = 0; j < d; j++)
        {
           novi_niz[j][i] = niz[i][j];
        }
    }
    
    for(int i = 0; i < d; i++)
        for(int j = 0; j < d; j++)
            niz[i][j] = novi_niz[i][j];
}

void sortiraj(int niz[][d], int kolona)
{
    int temp;
    for(int i = 0; i < d; i++)
    {
        for(int j = i + 1; j < d; j++)
        {
            if(niz[j][kolona] > niz[i][kolona])
            {
                for(int k = 0; k < d; k++)
                {
                    temp = niz[i][k];
                    niz[i][k] = niz[j][k];
                    niz[j][k] = temp;
                }
            }
        }
    }
}

int main()
{
    int matrica[d][d] = {};
    int kolona;
    
    generisanje(matrica);
    ispis(matrica);
    cout << endl;
    
    transponuj(matrica);
    ispis(matrica);
    cout << endl;
    
    do
    {
        cout << "Izaberite kolonu: " << endl;
        cin >> kolona;
        
    }while(kolona < 1 || kolona > 11);
    
    cout << endl;
    sortiraj(matrica, kolona-1);
    ispis(matrica);
    
    return 0;
}
